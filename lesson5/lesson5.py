# # Функции
# # def - ключевое слово 
# #   имя функции
# #          параметр функции
# def square(number):
#     result = number ** 2
#     return result
#     # ключевое слово return, возвращающее
#     # значение из функции, автоматически
#     # останавливает работу функции

# print(square(6))

# вызов справки по функциям
# help(print)

# help(len)

# Docstring - встроенное средство документирования модулей, 
# функций, классов и методов (help).

# def square(number):
#     '''
#     возведение числа в квадрат
#     '''
#     result = number ** 2
#     return result

# help(square) # вывод справки на функцию - возведение числа в квадрат

# # Параметры функции
# параметры задаются после запуска функции
# def square_2():
#     user_input = int(input('Введите число: '))
#     result = user_input ** 2
#     return result

# print(square_2())

# def power(num_1, num_2): # функция с двумя параметрами
#     return num_1 ** num_2 # вернуть возведение num_1 в степень num_2

# print(power(2, 5)) # подставляем 2 и 5 в функцию - 2 ** 5 = 32

# def power(num_1, num_2=2): # функция с двумя параметрами, второй параметр равен 2 
#     return num_1 ** num_2 # вернуть возведение num_1 в степень num_2

# print(power(2)) # вызываем функцию с указанием первого параметра (2)ю вывод: 4
# если, при вызове функции, указать оба параметра, то num_2=2 - игнорируется
# и num_2 задается новое значение

# def power(num_1, num_2=2): # функция с двумя параметрами, второй параметр равен 2 
#     return num_1 ** num_2 # вернуть возведение num_1 в степень num_2

# print(power(2, 7)) # вывод: 128

# # Тип данных None
# None - специальный тип данных, который означает отсутствие значения.
# Если в функции нет return, либо он пустой, то она возвращает None.

# def square_2(number):
#     result = number ** 2
#     print(result) # внутри функции - выводит значение 3 ** 2 = 9
#     #return result
# print(square_2(3)) # вычисления выполнены, но функция ничего не возвращает. вывод: None
 
# # Области видимости (scope) - определяет контекст объекта, в рамках которого его можно использовать
# Типы области видимости: 
#   - глобальная видимость (Global scope) - некая переменная является глобальной - определена вне любой из функций и доступна любой функции в программе. 
#   - локальная видимость (Local scope) - локальная переменная определяется внутри функции и доступна только из этой функции, т.е. имеет локальную область видимости 
#   - нелокальная видимость (Nonlocal scope)

# num_1 = 10 # глобальная видимость
# def power(num_1, num_2=2): # num_2 - локальная переменная 
#     return num_1 ** num_2
# print(power(2)) # параметр (2) - нелокальная видимость

# Если Python не может найти нужную переменную в локальной области видимости, 
# то тогда (и только тогда) он будет искать ее в области видимости
# уровнем выше. 

# number = 5  # глобальные переменные
# power = 3   # вне функции 

# def power_2():
#     number = 6  # локальные переменные
#     power = 2   # внутри функции
#     return number ** power

# print(number ** power) # в глобальном контексте. вывод: 5 ** 3 = 125 
# print(power_2()) # в локальном контексте, через функции вывод: 36

# number = 5  # глобальные переменные
# power = 3   # вне функции 

# def power_2():
#     number = 6  # локальные переменные
#     # power = 2   # функция не находит локальную переменную и обращается к глобальной
#     some_number = 1
#     return number ** power

# print(number ** power) # в глобальном контексте. вывод: 125 
# print(power_2()) # в локальном контексте, через функции вывод: 216
# print(some_number) # обращение из глобального контекста к переменной из локального контекста - ошибка
# # Снизу вверх переменные ищет (из локального внешние переменные видит), с верху вниз - нет (из глобального локальные переменные - не видит)

# # Операторы global и nonlocal

# Оператор global позволяет создать глобальную переменную в локальном контексте
# Оператор nonlocal позволяет изменить переменную в области видимости более высокого уровня
# (которая ,в свою очередь, является локальной областью видимости для других переменных)



# name = 'James'

# def say_hi():
#     name = 'Rinat' # используется локальная переменная, если она есть, а она есть
#     print(f'Hello, {name}')

# say_hi() # Hello, Rinat

#print(name) # James


# name = 'James'

# def say_hi():
#     global name # перезаписываем глобальное значение name 'James' на 'Rinat' (локальная переменная стала глобальной)
#     name = 'Rinat' 
#     print(f'Hello, {name}')

# print(name) # James - до вызова функции, поэтому global name - не сработало

# say_hi() # Hello, Rinat

# print(name) # Rinat - после срабатывания функции say_hi (внутри функции есть переопределение переменной на global)

# # Nonlocal

def say_hi():
    name = 'Rinat'


